exports.getRoutesInfo = (req, res) => {
  const routesInfo = `
  <h1>Welcome to the Library Management System API!</h1>
  <p>Below are the available API endpoints:</p>

  <h3>User Routes:</h3>
  <ul>
      <li>GET /api/users - Fetch all users.</li>
      <li>GET /api/users/:userId/issued-books - Fetch books issued to a specific user.</li>
  </ul>

  <h3>Book Routes:</h3>
  <ul>
      <li>GET /api/books - Fetch all books.</li>
      <li>GET /api/books/search?term=value - Search books by name or a term in the name.</li>
      <li>GET /api/books/rent-range?min=value&max=value - Search books by rent price range.</li>
      <li>GET /api/books/filter?category=value&term=value&minRent=value&maxRent=value - Search books by category, name, and rent range.</li>
      <li>GET /api/books/:bookName/transactions - Get transaction history for a book (list of users who issued it, current status).</li>
      <li>GET /api/books/:bookName/total-rent - Get total rent generated by a book.</li>
  </ul>

  <h3>Transaction Routes:</h3>
  <ul>
      <li>POST /api/transactions/issue - Issue a book to a user (requires book name, user ID, and issue date).</li>
      <li>POST /api/transactions/return - Return a book and calculate the rent (requires book name, user ID, and return date).</li>
      <li>GET /api/transactions?startDate=date&endDate=date - Get books issued within a date range, along with the users.</li>
  </ul>

  <h3>Helper Routes:</h3>
  <ul>
      <li>GET /api/users - Fetch all users.</li>
      <li>GET /api/books - Fetch all books.</li>
  </ul>

  <p>Please refer to the documentation for detailed input parameters and responses.</p>
  `;

  res.send(routesInfo);
};
